{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/React.Hillel/react-practice/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState } from \"react\"; // import AddTarget from \"./AddTarget\";\n// import CountChange from \"./CountChange\";\n//\n//\n// function App(){\n//     const [workers, setWorkers] = useState([\n//         {id:1, name: 'Samuel', surname: 'Jacson', count: 20, salary: 130},\n//         {id:2,name: 'Jam', surname: 'Luise', count: 23, salary: 110},\n//         {id:3,name: 'Katy', surname: 'Smitt', count: 20, salary: 100},\n//         {id:4,name: 'Julia', surname: 'Krosbi', count: 22, salary: 140},\n//         {id:5,name: 'Sam', surname: 'Venson', count: 22, salary: 160}\n//     ])\n//\n//     const createItem = (newItems) => {\n//         setWorkers([...workers, newItems])\n//     }\n//\n//     const changeItem = (newCount) => {\n//         setWorkers({...workers, count: newCount})\n//     }\n//\n//     return(\n//         <>\n//             <table>\n//                 <thead>\n//                 <tr>\n//                     <th> Name </th>\n//                     <th> Surname </th>\n//                     <th> Count days </th>\n//                     <th> Salary per day </th>\n//                     <th> Salary per month </th>\n//                 </tr>\n//                 </thead>\n//                 <tbody>\n//                 {workers.map(worker => (\n//                     <tr key={worker.id}>\n//                         <td>{worker.name}</td>\n//                         <td>{worker.surname}</td>\n//                         <CountChange\n//                         cnange={changeItem}\n//                         />\n//                         <td>{worker.salary}</td>\n//                         <td>{worker.salary * worker.count}</td>\n//                     </tr>\n//                 ))}\n//                 </tbody>\n//             </table>\n//\n//\n//             <AddTarget\n//             add={createItem}\n//             />\n//\n//\n//\n//             {/*<table>*/}\n//             {/*    <thead>*/}\n//             {/*    <tr>*/}\n//             {/*        <th> Name </th>*/}\n//             {/*        <th> Surname </th>*/}\n//             {/*        <th> Count days </th>*/}\n//             {/*        <th> Salary per day </th>*/}\n//             {/*        <th> Salary per month </th>*/}\n//             {/*    </tr>*/}\n//             {/*    </thead>*/}\n//             {/*    <tbody>*/}\n//             {/*    {workers.map(worker => (*/}\n//             {/*        <tr key={worker.id}>*/}\n//             {/*            <td>{worker.name}</td>*/}\n//             {/*            <td>{worker.surname}</td>*/}\n//             {/*            <input onChange={countChangeHandler} value={worker.count} />*/}\n//             {/*            <td>{worker.salary}</td>*/}\n//             {/*            <td>{worker.salary * worker.count}</td>*/}\n//             {/*        </tr>*/}\n//             {/*    ))}*/}\n//             {/*    </tbody>*/}\n//             {/*</table>*/}\n//\n//\n// </>\n//         )\n//\n// }\n//\n// export default App;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initNotes = [{\n  // id: id(),\n  fields: [{\n    name: 'prop1',\n    value: 'value11',\n    isEdit: false\n  }, {\n    name: 'prop2',\n    value: 'value12',\n    isEdit: false\n  }, {\n    name: 'prop3',\n    value: 'value13',\n    isEdit: false\n  }]\n}, {\n  // id: id(),\n  fields: [{\n    name: 'prop1',\n    value: 'value21',\n    isEdit: false\n  }, {\n    name: 'prop2',\n    value: 'value22',\n    isEdit: false\n  }, {\n    name: 'prop3',\n    value: 'value23',\n    isEdit: false\n  }]\n}, {\n  // id: id(),\n  fields: [{\n    name: 'prop1',\n    value: 'value31',\n    isEdit: false\n  }, {\n    name: 'prop2',\n    value: 'value32',\n    isEdit: false\n  }, {\n    name: 'prop3',\n    value: 'value33',\n    isEdit: false\n  }]\n}];\n\nfunction App() {\n  _s();\n\n  const [notes, setNotes] = useState(initNotes);\n  const rows = notes.map(note => {\n    const cells = note.fields.map(field => {\n      let elem;\n\n      if (!field.isEdit) {\n        elem = /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => startEdit(note.id, field.name),\n          children: field.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 28\n        }, this);\n      } else {\n        elem = /*#__PURE__*/_jsxDEV(\"input\", {\n          value: field.value,\n          onChange: event => changeCell(note.id, field.name, event),\n          onBlur: () => endEdit(note.id, field.name)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 28\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"td\", {\n        children: elem\n      }, field.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 24\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: cells\n    }, note.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 20\n    }, this);\n  });\n\n  function startEdit(id, name) {\n    setNotes(notes.map(note => {\n      if (note.id === id) {\n        const fields = note.fields.map(field => {\n          if (field.name === name) {\n            return { ...field,\n              isEdit: true\n            };\n          } else {\n            return field;\n          }\n        });\n        return {\n          id,\n          fields\n        };\n      } else {\n        return note;\n      }\n    }));\n  }\n\n  function endEdit(id, name) {\n    setNotes(notes.map(note => {\n      if (note.id === id) {\n        const fields = note.fields.map(field => {\n          if (field.name === name) {\n            return { ...field,\n              isEdit: false\n            };\n          } else {\n            return field;\n          }\n        });\n        return {\n          id,\n          fields\n        };\n      } else {\n        return note;\n      }\n    }));\n  }\n\n  function changeCell(id, name, event) {\n    setNotes(notes.map(note => {\n      if (note.id === id) {\n        const fields = note.fields.map(field => {\n          if (field.name === name) {\n            return { ...field,\n              value: event.target.value\n            };\n          } else {\n            return field;\n          }\n        });\n        return {\n          id,\n          fields\n        };\n      } else {\n        return note;\n      }\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 16\n  }, this);\n}\n\n_s(App, \"a19zpSKz3nme9rytGYr1Gca6MLc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","initNotes","fields","name","value","isEdit","App","notes","setNotes","rows","map","note","cells","field","elem","startEdit","id","event","changeCell","endEdit","target"],"sources":["/Users/user/Documents/React.Hillel/react-practice/src/App.js"],"sourcesContent":["import './App.css';\nimport {useState} from \"react\";\n// import AddTarget from \"./AddTarget\";\n// import CountChange from \"./CountChange\";\n//\n//\n// function App(){\n//     const [workers, setWorkers] = useState([\n//         {id:1, name: 'Samuel', surname: 'Jacson', count: 20, salary: 130},\n//         {id:2,name: 'Jam', surname: 'Luise', count: 23, salary: 110},\n//         {id:3,name: 'Katy', surname: 'Smitt', count: 20, salary: 100},\n//         {id:4,name: 'Julia', surname: 'Krosbi', count: 22, salary: 140},\n//         {id:5,name: 'Sam', surname: 'Venson', count: 22, salary: 160}\n//     ])\n//\n//     const createItem = (newItems) => {\n//         setWorkers([...workers, newItems])\n//     }\n//\n//     const changeItem = (newCount) => {\n//         setWorkers({...workers, count: newCount})\n//     }\n//\n//     return(\n//         <>\n//             <table>\n//                 <thead>\n//                 <tr>\n//                     <th> Name </th>\n//                     <th> Surname </th>\n//                     <th> Count days </th>\n//                     <th> Salary per day </th>\n//                     <th> Salary per month </th>\n//                 </tr>\n//                 </thead>\n//                 <tbody>\n//                 {workers.map(worker => (\n//                     <tr key={worker.id}>\n//                         <td>{worker.name}</td>\n//                         <td>{worker.surname}</td>\n//                         <CountChange\n//                         cnange={changeItem}\n//                         />\n//                         <td>{worker.salary}</td>\n//                         <td>{worker.salary * worker.count}</td>\n//                     </tr>\n//                 ))}\n//                 </tbody>\n//             </table>\n//\n//\n//             <AddTarget\n//             add={createItem}\n//             />\n//\n//\n//\n//             {/*<table>*/}\n//             {/*    <thead>*/}\n//             {/*    <tr>*/}\n//             {/*        <th> Name </th>*/}\n//             {/*        <th> Surname </th>*/}\n//             {/*        <th> Count days </th>*/}\n//             {/*        <th> Salary per day </th>*/}\n//             {/*        <th> Salary per month </th>*/}\n//             {/*    </tr>*/}\n//             {/*    </thead>*/}\n//             {/*    <tbody>*/}\n//             {/*    {workers.map(worker => (*/}\n//             {/*        <tr key={worker.id}>*/}\n//             {/*            <td>{worker.name}</td>*/}\n//             {/*            <td>{worker.surname}</td>*/}\n//             {/*            <input onChange={countChangeHandler} value={worker.count} />*/}\n//             {/*            <td>{worker.salary}</td>*/}\n//             {/*            <td>{worker.salary * worker.count}</td>*/}\n//             {/*        </tr>*/}\n//             {/*    ))}*/}\n//             {/*    </tbody>*/}\n//             {/*</table>*/}\n//\n//\n// </>\n//         )\n//\n// }\n//\n// export default App;\n\nconst initNotes = [\n    {\n        // id: id(),\n        fields: [\n            {name: 'prop1', value: 'value11', isEdit: false},\n            {name: 'prop2', value: 'value12', isEdit: false},\n            {name: 'prop3', value: 'value13', isEdit: false},\n        ]\n    },\n    {\n        // id: id(),\n        fields: [\n            {name: 'prop1', value: 'value21', isEdit: false},\n            {name: 'prop2', value: 'value22', isEdit: false},\n            {name: 'prop3', value: 'value23', isEdit: false},\n        ]\n    },\n    {\n        // id: id(),\n        fields: [\n            {name: 'prop1', value: 'value31', isEdit: false},\n            {name: 'prop2', value: 'value32', isEdit: false},\n            {name: 'prop3', value: 'value33', isEdit: false},\n        ]\n    },\n];\n\n    function App() {\n        const [notes, setNotes] = useState(initNotes);\n\n        const rows = notes.map(note => {\n            const cells = note.fields.map(field => {\n                let elem;\n\n                if (!field.isEdit) {\n                    elem = <span onClick={() => startEdit(note.id, field.name)}>\n\t\t\t\t\t{field.value}\n\t\t\t\t</span>;\n                } else {\n                    elem = <input\n                        value={field.value}\n                        onChange={(event) => changeCell(note.id, field.name,\n                            event)}\n                        onBlur={() => endEdit(note.id, field.name)}\n                    />;\n                }\n\n                return <td key={field.name}>{elem}</td>;\n            });\n\n            return <tr key={note.id}>{cells}</tr>;\n        });\n\n        function startEdit(id, name) {\n            setNotes(notes.map(note => {\n                if (note.id === id) {\n                    const fields = note.fields.map(field => {\n                        if (field.name === name) {\n                            return {...field, isEdit: true}\n                        } else {\n                            return field;\n                        }\n                    });\n\n                    return {id, fields};\n                } else {\n                    return note;\n                }\n            }));\n        }\n\n        function endEdit(id, name) {\n            setNotes(notes.map(note => {\n                if (note.id === id) {\n                    const fields = note.fields.map(field => {\n                        if (field.name === name) {\n                            return {...field, isEdit: false}\n                        } else {\n                            return field;\n                        }\n                    });\n\n                    return {id, fields};\n                } else {\n                    return note;\n                }\n            }));\n        }\n\n        function changeCell(id, name, event) {\n            setNotes(notes.map(note => {\n                if (note.id === id) {\n                    const fields = note.fields.map(field => {\n                        if (field.name === name) {\n                            return {...field, value: event.target.value}\n                        } else {\n                            return field;\n                        }\n                    });\n\n                    return {id, fields};\n                } else {\n                    return note;\n                }\n            }));\n        }\n\n        return <div>\n            <table>\n                <tbody>\n                {rows}\n                </tbody>\n            </table>\n        </div>;\n    }\n\n    export default App"],"mappings":"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"},"metadata":{},"sourceType":"module"}