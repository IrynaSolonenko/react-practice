{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/React.Hillel/react-practice/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState } from \"react\";\nimport AddTarget from \"./AddTarget\";\nimport CountChange from \"./CountChange\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [workers, setWorkers] = useState([{\n    name: 'Samuel',\n    surname: 'Jacson',\n    count: 20,\n    salary: 130,\n    isEdit: false\n  }, {\n    name: 'Jam',\n    surname: 'Luise',\n    count: 23,\n    salary: 110,\n    isEdit: false\n  }, {\n    name: 'Katy',\n    surname: 'Smitt',\n    count: 20,\n    salary: 100,\n    isEdit: false\n  }, {\n    name: 'Julia',\n    surname: 'Krosbi',\n    count: 22,\n    salary: 140,\n    isEdit: false\n  }, {\n    name: 'Sam',\n    surname: 'Venson',\n    count: 22,\n    salary: 160,\n    isEdit: false\n  }]);\n  const result = workers.map((worker, index) => {\n    let elem;\n\n    if (!worker.isEdit) {\n      elem = /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: () => startEdit(index),\n        children: [worker.name, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 20\n      }, this);\n    } else {\n      elem = /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => changeNote(index, e),\n        value: worker.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [elem, \" \"]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 16\n    }, this);\n  });\n\n  function startEdit(index) {\n    const copy = Object.assign([], workers);\n    copy[index].isEdit = true;\n    setWorkers(copy);\n  }\n\n  function changeNote(index, event) {\n    const copy = Object.assign([], workers);\n    copy[index].text = event.target.value;\n    setWorkers(copy);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: result\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n} // function App(){\n//     const [workers, setWorkers] = useState([\n//         {id:1, name: 'Samuel', surname: 'Jacson', count: 20, salary: 130},\n//         {id:2,name: 'Jam', surname: 'Luise', count: 23, salary: 110},\n//         {id:3,name: 'Katy', surname: 'Smitt', count: 20, salary: 100},\n//         {id:4,name: 'Julia', surname: 'Krosbi', count: 22, salary: 140},\n//         {id:5,name: 'Sam', surname: 'Venson', count: 22, salary: 160}\n//     ])\n//\n//     const createItem = (newItems) => {\n//         setWorkers([...workers, newItems])\n//     }\n//\n//     const changeItem = (newCount) => {\n//         setWorkers({...workers, count: newCount})\n//     }\n//\n//     return(\n//         <>\n//             <table>\n//                 <thead>\n//                 <tr>\n//                     <th> Name </th>\n//                     <th> Surname </th>\n//                     <th> Count days </th>\n//                     <th> Salary per day </th>\n//                     <th> Salary per month </th>\n//                 </tr>\n//                 </thead>\n//                 <tbody>\n//                 {workers.map(worker => (\n//                     <tr key={worker.id}>\n//                         <td>{worker.name}</td>\n//                         <td>{worker.surname}</td>\n//                         <CountChange\n//                         cnange={changeItem}\n//                         />\n//                         <td>{worker.salary}</td>\n//                         <td>{worker.salary * worker.count}</td>\n//                     </tr>\n//                 ))}\n//                 </tbody>\n//             </table>\n//\n//\n//             <AddTarget\n//             add={createItem}\n//             />\n//\n//\n//\n//             {/*<table>*/}\n//             {/*    <thead>*/}\n//             {/*    <tr>*/}\n//             {/*        <th> Name </th>*/}\n//             {/*        <th> Surname </th>*/}\n//             {/*        <th> Count days </th>*/}\n//             {/*        <th> Salary per day </th>*/}\n//             {/*        <th> Salary per month </th>*/}\n//             {/*    </tr>*/}\n//             {/*    </thead>*/}\n//             {/*    <tbody>*/}\n//             {/*    {workers.map(worker => (*/}\n//             {/*        <tr key={worker.id}>*/}\n//             {/*            <td>{worker.name}</td>*/}\n//             {/*            <td>{worker.surname}</td>*/}\n//             {/*            <input onChange={countChangeHandler} value={worker.count} />*/}\n//             {/*            <td>{worker.salary}</td>*/}\n//             {/*            <td>{worker.salary * worker.count}</td>*/}\n//             {/*        </tr>*/}\n//             {/*    ))}*/}\n//             {/*    </tbody>*/}\n//             {/*</table>*/}\n//\n//\n// </>\n//         )\n//\n// }\n\n\n_s(App, \"GSUgJBoTDkZXxNm9PEYZKjuvju4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","AddTarget","CountChange","App","workers","setWorkers","name","surname","count","salary","isEdit","result","map","worker","index","elem","startEdit","e","changeNote","copy","Object","assign","event","text","target","value"],"sources":["/Users/user/Documents/React.Hillel/react-practice/src/App.js"],"sourcesContent":["import './App.css';\nimport {useState} from \"react\";\nimport AddTarget from \"./AddTarget\";\nimport CountChange from \"./CountChange\";\n\n\nfunction App(){\n    const [workers, setWorkers] = useState([\n        {name: 'Samuel', surname: 'Jacson', count: 20, salary: 130, isEdit:false},\n        {name: 'Jam', surname: 'Luise', count: 23, salary: 110, isEdit:false},\n        {name: 'Katy', surname: 'Smitt', count: 20, salary: 100, isEdit:false},\n        {name: 'Julia', surname: 'Krosbi', count: 22, salary: 140, isEdit:false},\n        {name: 'Sam', surname: 'Venson', count: 22, salary: 160, isEdit:false}\n    ])\n\n    const result = workers.map((worker, index)=>{\n        let elem;\n        if (!worker.isEdit){\n            elem = <span onClick={()=>startEdit(index)}>{worker.name} </span>\n        } else {\n            elem = <input\n                onChange={e=>changeNote(index, e)}\n                value={worker.name}/>\n        }\n        return <li key={index}>{elem} </li>\n    })\n\n    function startEdit(index) {\n        const copy = Object.assign([], workers);\n        copy[index].isEdit = true;\n        setWorkers(copy);\n    }\n\n    function changeNote(index, event) {\n        const copy = Object.assign([], workers);\n        copy[index].text = event.target.value;\n        setWorkers(copy);\n    }\n\n    return(\n        <ul>\n            {result}\n        </ul>\n    )\n}\n\n\n\n\n\n\n\n\n\n\n// function App(){\n//     const [workers, setWorkers] = useState([\n//         {id:1, name: 'Samuel', surname: 'Jacson', count: 20, salary: 130},\n//         {id:2,name: 'Jam', surname: 'Luise', count: 23, salary: 110},\n//         {id:3,name: 'Katy', surname: 'Smitt', count: 20, salary: 100},\n//         {id:4,name: 'Julia', surname: 'Krosbi', count: 22, salary: 140},\n//         {id:5,name: 'Sam', surname: 'Venson', count: 22, salary: 160}\n//     ])\n//\n//     const createItem = (newItems) => {\n//         setWorkers([...workers, newItems])\n//     }\n//\n//     const changeItem = (newCount) => {\n//         setWorkers({...workers, count: newCount})\n//     }\n//\n//     return(\n//         <>\n//             <table>\n//                 <thead>\n//                 <tr>\n//                     <th> Name </th>\n//                     <th> Surname </th>\n//                     <th> Count days </th>\n//                     <th> Salary per day </th>\n//                     <th> Salary per month </th>\n//                 </tr>\n//                 </thead>\n//                 <tbody>\n//                 {workers.map(worker => (\n//                     <tr key={worker.id}>\n//                         <td>{worker.name}</td>\n//                         <td>{worker.surname}</td>\n//                         <CountChange\n//                         cnange={changeItem}\n//                         />\n//                         <td>{worker.salary}</td>\n//                         <td>{worker.salary * worker.count}</td>\n//                     </tr>\n//                 ))}\n//                 </tbody>\n//             </table>\n//\n//\n//             <AddTarget\n//             add={createItem}\n//             />\n//\n//\n//\n//             {/*<table>*/}\n//             {/*    <thead>*/}\n//             {/*    <tr>*/}\n//             {/*        <th> Name </th>*/}\n//             {/*        <th> Surname </th>*/}\n//             {/*        <th> Count days </th>*/}\n//             {/*        <th> Salary per day </th>*/}\n//             {/*        <th> Salary per month </th>*/}\n//             {/*    </tr>*/}\n//             {/*    </thead>*/}\n//             {/*    <tbody>*/}\n//             {/*    {workers.map(worker => (*/}\n//             {/*        <tr key={worker.id}>*/}\n//             {/*            <td>{worker.name}</td>*/}\n//             {/*            <td>{worker.surname}</td>*/}\n//             {/*            <input onChange={countChangeHandler} value={worker.count} />*/}\n//             {/*            <td>{worker.salary}</td>*/}\n//             {/*            <td>{worker.salary * worker.count}</td>*/}\n//             {/*        </tr>*/}\n//             {/*    ))}*/}\n//             {/*    </tbody>*/}\n//             {/*</table>*/}\n//\n//\n// </>\n//         )\n//\n// }\n\nexport default App;"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAAQA,QAAR,QAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAGA,SAASC,GAAT,GAAc;EAAA;;EACV,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,CACnC;IAACM,IAAI,EAAE,QAAP;IAAiBC,OAAO,EAAE,QAA1B;IAAoCC,KAAK,EAAE,EAA3C;IAA+CC,MAAM,EAAE,GAAvD;IAA4DC,MAAM,EAAC;EAAnE,CADmC,EAEnC;IAACJ,IAAI,EAAE,KAAP;IAAcC,OAAO,EAAE,OAAvB;IAAgCC,KAAK,EAAE,EAAvC;IAA2CC,MAAM,EAAE,GAAnD;IAAwDC,MAAM,EAAC;EAA/D,CAFmC,EAGnC;IAACJ,IAAI,EAAE,MAAP;IAAeC,OAAO,EAAE,OAAxB;IAAiCC,KAAK,EAAE,EAAxC;IAA4CC,MAAM,EAAE,GAApD;IAAyDC,MAAM,EAAC;EAAhE,CAHmC,EAInC;IAACJ,IAAI,EAAE,OAAP;IAAgBC,OAAO,EAAE,QAAzB;IAAmCC,KAAK,EAAE,EAA1C;IAA8CC,MAAM,EAAE,GAAtD;IAA2DC,MAAM,EAAC;EAAlE,CAJmC,EAKnC;IAACJ,IAAI,EAAE,KAAP;IAAcC,OAAO,EAAE,QAAvB;IAAiCC,KAAK,EAAE,EAAxC;IAA4CC,MAAM,EAAE,GAApD;IAAyDC,MAAM,EAAC;EAAhE,CALmC,CAAD,CAAtC;EAQA,MAAMC,MAAM,GAAGP,OAAO,CAACQ,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,KAAiB;IACxC,IAAIC,IAAJ;;IACA,IAAI,CAACF,MAAM,CAACH,MAAZ,EAAmB;MACfK,IAAI,gBAAG;QAAM,OAAO,EAAE,MAAIC,SAAS,CAACF,KAAD,CAA5B;QAAA,WAAsCD,MAAM,CAACP,IAA7C;MAAA;QAAA;QAAA;QAAA;MAAA,QAAP;IACH,CAFD,MAEO;MACHS,IAAI,gBAAG;QACH,QAAQ,EAAEE,CAAC,IAAEC,UAAU,CAACJ,KAAD,EAAQG,CAAR,CADpB;QAEH,KAAK,EAAEJ,MAAM,CAACP;MAFX;QAAA;QAAA;QAAA;MAAA,QAAP;IAGH;;IACD,oBAAO;MAAA,WAAiBS,IAAjB;IAAA,GAASD,KAAT;MAAA;MAAA;MAAA;IAAA,QAAP;EACH,CAVc,CAAf;;EAYA,SAASE,SAAT,CAAmBF,KAAnB,EAA0B;IACtB,MAAMK,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBjB,OAAlB,CAAb;IACAe,IAAI,CAACL,KAAD,CAAJ,CAAYJ,MAAZ,GAAqB,IAArB;IACAL,UAAU,CAACc,IAAD,CAAV;EACH;;EAED,SAASD,UAAT,CAAoBJ,KAApB,EAA2BQ,KAA3B,EAAkC;IAC9B,MAAMH,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBjB,OAAlB,CAAb;IACAe,IAAI,CAACL,KAAD,CAAJ,CAAYS,IAAZ,GAAmBD,KAAK,CAACE,MAAN,CAAaC,KAAhC;IACApB,UAAU,CAACc,IAAD,CAAV;EACH;;EAED,oBACI;IAAA,UACKR;EADL;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,C,CAWD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GA/HSR,G;;KAAAA,G;AAiIT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}