{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/React.Hillel/react-practice/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState } from \"react\";\nimport AddTarget from \"./AddTarget\";\nimport CountChange from \"./CountChange\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [workers, setWorkers] = useState([{\n    id: 1,\n    name: 'Samuel',\n    surname: 'Jacson',\n    count: 20,\n    salary: 130,\n    isEdit: false\n  }, {\n    id: 2,\n    name: 'Jam',\n    surname: 'Luise',\n    count: 23,\n    salary: 110,\n    isEdit: false\n  }, {\n    id: 3,\n    name: 'Katy',\n    surname: 'Smitt',\n    count: 20,\n    salary: 100,\n    isEdit: false\n  }, {\n    id: 4,\n    name: 'Julia',\n    surname: 'Krosbi',\n    count: 22,\n    salary: 140,\n    isEdit: false\n  }, {\n    id: 5,\n    name: 'Sam',\n    surname: 'Venson',\n    count: 22,\n    salary: 160,\n    isEdit: false\n  }]);\n  const result = workers.map(worker => {\n    let elem;\n\n    if (!worker.isEdit) {\n      elem = /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [worker.name, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 20\n      }, this);\n    } else {\n      elem = /*#__PURE__*/_jsxDEV(\"input\", {\n        value: worker.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [worker.name, \" \"]\n    }, worker.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: result\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n} // function App(){\n//     const [workers, setWorkers] = useState([\n//         {id:1, name: 'Samuel', surname: 'Jacson', count: 20, salary: 130},\n//         {id:2,name: 'Jam', surname: 'Luise', count: 23, salary: 110},\n//         {id:3,name: 'Katy', surname: 'Smitt', count: 20, salary: 100},\n//         {id:4,name: 'Julia', surname: 'Krosbi', count: 22, salary: 140},\n//         {id:5,name: 'Sam', surname: 'Venson', count: 22, salary: 160}\n//     ])\n//\n//     const createItem = (newItems) => {\n//         setWorkers([...workers, newItems])\n//     }\n//\n//     const changeItem = (newCount) => {\n//         setWorkers({...workers, count: newCount})\n//     }\n//\n//     return(\n//         <>\n//             <table>\n//                 <thead>\n//                 <tr>\n//                     <th> Name </th>\n//                     <th> Surname </th>\n//                     <th> Count days </th>\n//                     <th> Salary per day </th>\n//                     <th> Salary per month </th>\n//                 </tr>\n//                 </thead>\n//                 <tbody>\n//                 {workers.map(worker => (\n//                     <tr key={worker.id}>\n//                         <td>{worker.name}</td>\n//                         <td>{worker.surname}</td>\n//                         <CountChange\n//                         cnange={changeItem}\n//                         />\n//                         <td>{worker.salary}</td>\n//                         <td>{worker.salary * worker.count}</td>\n//                     </tr>\n//                 ))}\n//                 </tbody>\n//             </table>\n//\n//\n//             <AddTarget\n//             add={createItem}\n//             />\n//\n//\n//\n//             {/*<table>*/}\n//             {/*    <thead>*/}\n//             {/*    <tr>*/}\n//             {/*        <th> Name </th>*/}\n//             {/*        <th> Surname </th>*/}\n//             {/*        <th> Count days </th>*/}\n//             {/*        <th> Salary per day </th>*/}\n//             {/*        <th> Salary per month </th>*/}\n//             {/*    </tr>*/}\n//             {/*    </thead>*/}\n//             {/*    <tbody>*/}\n//             {/*    {workers.map(worker => (*/}\n//             {/*        <tr key={worker.id}>*/}\n//             {/*            <td>{worker.name}</td>*/}\n//             {/*            <td>{worker.surname}</td>*/}\n//             {/*            <input onChange={countChangeHandler} value={worker.count} />*/}\n//             {/*            <td>{worker.salary}</td>*/}\n//             {/*            <td>{worker.salary * worker.count}</td>*/}\n//             {/*        </tr>*/}\n//             {/*    ))}*/}\n//             {/*    </tbody>*/}\n//             {/*</table>*/}\n//\n//\n// </>\n//         )\n//\n// }\n\n\n_s(App, \"9Kqvf2opDPYa8LK0MgXPC9rZc2s=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","AddTarget","CountChange","App","workers","setWorkers","id","name","surname","count","salary","isEdit","result","map","worker","elem"],"sources":["/Users/user/Documents/React.Hillel/react-practice/src/App.js"],"sourcesContent":["import './App.css';\nimport {useState} from \"react\";\nimport AddTarget from \"./AddTarget\";\nimport CountChange from \"./CountChange\";\n\n\nfunction App(){\n    const [workers, setWorkers] = useState([\n        {id:1, name: 'Samuel', surname: 'Jacson', count: 20, salary: 130, isEdit:false},\n        {id:2,name: 'Jam', surname: 'Luise', count: 23, salary: 110, isEdit:false},\n        {id:3,name: 'Katy', surname: 'Smitt', count: 20, salary: 100, isEdit:false},\n        {id:4,name: 'Julia', surname: 'Krosbi', count: 22, salary: 140, isEdit:false},\n        {id:5,name: 'Sam', surname: 'Venson', count: 22, salary: 160, isEdit:false}\n    ])\n\n    const result = workers.map(worker=>{\n        let elem;\n        if (!worker.isEdit){\n            elem = <span>{worker.name} </span>\n        } else {\n            elem = <input value={worker.name}/>\n        }\n\n\n        return <li key={worker.id}>{worker.name} </li>\n    })\n\n    return(\n        <ul>\n            {result}\n        </ul>\n    )\n}\n\n\n\n\n\n\n\n\n\n\n// function App(){\n//     const [workers, setWorkers] = useState([\n//         {id:1, name: 'Samuel', surname: 'Jacson', count: 20, salary: 130},\n//         {id:2,name: 'Jam', surname: 'Luise', count: 23, salary: 110},\n//         {id:3,name: 'Katy', surname: 'Smitt', count: 20, salary: 100},\n//         {id:4,name: 'Julia', surname: 'Krosbi', count: 22, salary: 140},\n//         {id:5,name: 'Sam', surname: 'Venson', count: 22, salary: 160}\n//     ])\n//\n//     const createItem = (newItems) => {\n//         setWorkers([...workers, newItems])\n//     }\n//\n//     const changeItem = (newCount) => {\n//         setWorkers({...workers, count: newCount})\n//     }\n//\n//     return(\n//         <>\n//             <table>\n//                 <thead>\n//                 <tr>\n//                     <th> Name </th>\n//                     <th> Surname </th>\n//                     <th> Count days </th>\n//                     <th> Salary per day </th>\n//                     <th> Salary per month </th>\n//                 </tr>\n//                 </thead>\n//                 <tbody>\n//                 {workers.map(worker => (\n//                     <tr key={worker.id}>\n//                         <td>{worker.name}</td>\n//                         <td>{worker.surname}</td>\n//                         <CountChange\n//                         cnange={changeItem}\n//                         />\n//                         <td>{worker.salary}</td>\n//                         <td>{worker.salary * worker.count}</td>\n//                     </tr>\n//                 ))}\n//                 </tbody>\n//             </table>\n//\n//\n//             <AddTarget\n//             add={createItem}\n//             />\n//\n//\n//\n//             {/*<table>*/}\n//             {/*    <thead>*/}\n//             {/*    <tr>*/}\n//             {/*        <th> Name </th>*/}\n//             {/*        <th> Surname </th>*/}\n//             {/*        <th> Count days </th>*/}\n//             {/*        <th> Salary per day </th>*/}\n//             {/*        <th> Salary per month </th>*/}\n//             {/*    </tr>*/}\n//             {/*    </thead>*/}\n//             {/*    <tbody>*/}\n//             {/*    {workers.map(worker => (*/}\n//             {/*        <tr key={worker.id}>*/}\n//             {/*            <td>{worker.name}</td>*/}\n//             {/*            <td>{worker.surname}</td>*/}\n//             {/*            <input onChange={countChangeHandler} value={worker.count} />*/}\n//             {/*            <td>{worker.salary}</td>*/}\n//             {/*            <td>{worker.salary * worker.count}</td>*/}\n//             {/*        </tr>*/}\n//             {/*    ))}*/}\n//             {/*    </tbody>*/}\n//             {/*</table>*/}\n//\n//\n// </>\n//         )\n//\n// }\n\nexport default App;"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAAQA,QAAR,QAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAGA,SAASC,GAAT,GAAc;EAAA;;EACV,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,CACnC;IAACM,EAAE,EAAC,CAAJ;IAAOC,IAAI,EAAE,QAAb;IAAuBC,OAAO,EAAE,QAAhC;IAA0CC,KAAK,EAAE,EAAjD;IAAqDC,MAAM,EAAE,GAA7D;IAAkEC,MAAM,EAAC;EAAzE,CADmC,EAEnC;IAACL,EAAE,EAAC,CAAJ;IAAMC,IAAI,EAAE,KAAZ;IAAmBC,OAAO,EAAE,OAA5B;IAAqCC,KAAK,EAAE,EAA5C;IAAgDC,MAAM,EAAE,GAAxD;IAA6DC,MAAM,EAAC;EAApE,CAFmC,EAGnC;IAACL,EAAE,EAAC,CAAJ;IAAMC,IAAI,EAAE,MAAZ;IAAoBC,OAAO,EAAE,OAA7B;IAAsCC,KAAK,EAAE,EAA7C;IAAiDC,MAAM,EAAE,GAAzD;IAA8DC,MAAM,EAAC;EAArE,CAHmC,EAInC;IAACL,EAAE,EAAC,CAAJ;IAAMC,IAAI,EAAE,OAAZ;IAAqBC,OAAO,EAAE,QAA9B;IAAwCC,KAAK,EAAE,EAA/C;IAAmDC,MAAM,EAAE,GAA3D;IAAgEC,MAAM,EAAC;EAAvE,CAJmC,EAKnC;IAACL,EAAE,EAAC,CAAJ;IAAMC,IAAI,EAAE,KAAZ;IAAmBC,OAAO,EAAE,QAA5B;IAAsCC,KAAK,EAAE,EAA7C;IAAiDC,MAAM,EAAE,GAAzD;IAA8DC,MAAM,EAAC;EAArE,CALmC,CAAD,CAAtC;EAQA,MAAMC,MAAM,GAAGR,OAAO,CAACS,GAAR,CAAYC,MAAM,IAAE;IAC/B,IAAIC,IAAJ;;IACA,IAAI,CAACD,MAAM,CAACH,MAAZ,EAAmB;MACfI,IAAI,gBAAG;QAAA,WAAOD,MAAM,CAACP,IAAd;MAAA;QAAA;QAAA;QAAA;MAAA,QAAP;IACH,CAFD,MAEO;MACHQ,IAAI,gBAAG;QAAO,KAAK,EAAED,MAAM,CAACP;MAArB;QAAA;QAAA;QAAA;MAAA,QAAP;IACH;;IAGD,oBAAO;MAAA,WAAqBO,MAAM,CAACP,IAA5B;IAAA,GAASO,MAAM,CAACR,EAAhB;MAAA;MAAA;MAAA;IAAA,QAAP;EACH,CAVc,CAAf;EAYA,oBACI;IAAA,UACKM;EADL;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,C,CAWD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAnHST,G;;KAAAA,G;AAqHT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}