{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/React.Hillel/react-practice/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState } from \"react\"; // function App(){\n//     const work = [\n//         {name: 'Samuel', surname: 'Jacson', count: 20, salary: 130, isEdit:false},\n//         {name: 'Jam', surname: 'Luise', count: 23, salary: 110, isEdit:false},\n//         {name: 'Katy', surname: 'Smitt', count: 20, salary: 100, isEdit:false},\n//         {name: 'Julia', surname: 'Krosbi', count: 22, salary: 140, isEdit:false},\n//         {name: 'Sam', surname: 'Venson', count: 22, salary: 160, isEdit:false}\n//     ]\n//\n//     const [workers, setWorkers] = useState(work)\n//\n//     function startEdit(index) {\n//         const copy = Object.assign([], workers);\n//         copy[index].isEdit = true;\n//         setWorkers(copy);\n//     }\n//\n//     function endEdit(index) {\n//         const copy = Object.assign([], workers);\n//         copy[index].isEdit = false;\n//         setWorkers(copy);\n//     }\n//\n//     function changeNote(index, event) {\n//         const copy = Object.assign([], workers);\n//         copy[index].text = event.target.value;\n//         setWorkers(copy);\n//     }\n//\n//     const result = workers.map((worker, index)=>{\n//         let elem;\n//         if (!worker.isEdit){\n//             elem = <span onClick={()=>startEdit(index)}>{worker.name} </span>\n//         } else {\n//             elem = <input\n//                 onChange={e=>changeNote(index, e)}\n//                 value={worker.name}\n//                 onBlur={() => endEdit(index)}\n//             />\n//         }\n//         return <li key={index}>{elem} </li>\n//     })\n//\n//     return(\n//         <ul>\n//             {result}\n//         </ul>\n//     )\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [notes, setNotes] = useState(initNotes);\n\n  function startEdit(index) {\n    const copy = Object.assign([], notes);\n    copy[index].isEdit = true;\n    setNotes(copy);\n  }\n\n  function endEdit(index) {\n    const copy = Object.assign([], notes);\n    copy[index].isEdit = false;\n    setNotes(copy);\n  }\n\n  function changeNote(index, event) {\n    const copy = Object.assign([], notes);\n    copy[index].text = event.target.value;\n    setNotes(copy);\n  }\n\n  const result = notes.map((note, index) => {\n    let elem;\n\n    if (!note.isEdit) {\n      elem = /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: () => startEdit(index),\n        children: note.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 20\n      }, this);\n    } else {\n      elem = /*#__PURE__*/_jsxDEV(\"input\", {\n        value: note.text,\n        onChange: event => changeNote(index, event),\n        onBlur: () => endEdit(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: elem\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: result\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 12\n  }, this);\n} // function App(){\n//     const [workers, setWorkers] = useState([\n//         {id:1, name: 'Samuel', surname: 'Jacson', count: 20, salary: 130},\n//         {id:2,name: 'Jam', surname: 'Luise', count: 23, salary: 110},\n//         {id:3,name: 'Katy', surname: 'Smitt', count: 20, salary: 100},\n//         {id:4,name: 'Julia', surname: 'Krosbi', count: 22, salary: 140},\n//         {id:5,name: 'Sam', surname: 'Venson', count: 22, salary: 160}\n//     ])\n//\n//     const createItem = (newItems) => {\n//         setWorkers([...workers, newItems])\n//     }\n//\n//     const changeItem = (newCount) => {\n//         setWorkers({...workers, count: newCount})\n//     }\n//\n//     return(\n//         <>\n//             <table>\n//                 <thead>\n//                 <tr>\n//                     <th> Name </th>\n//                     <th> Surname </th>\n//                     <th> Count days </th>\n//                     <th> Salary per day </th>\n//                     <th> Salary per month </th>\n//                 </tr>\n//                 </thead>\n//                 <tbody>\n//                 {workers.map(worker => (\n//                     <tr key={worker.id}>\n//                         <td>{worker.name}</td>\n//                         <td>{worker.surname}</td>\n//                         <CountChange\n//                         cnange={changeItem}\n//                         />\n//                         <td>{worker.salary}</td>\n//                         <td>{worker.salary * worker.count}</td>\n//                     </tr>\n//                 ))}\n//                 </tbody>\n//             </table>\n//\n//\n//             <AddTarget\n//             add={createItem}\n//             />\n//\n//\n//\n//             {/*<table>*/}\n//             {/*    <thead>*/}\n//             {/*    <tr>*/}\n//             {/*        <th> Name </th>*/}\n//             {/*        <th> Surname </th>*/}\n//             {/*        <th> Count days </th>*/}\n//             {/*        <th> Salary per day </th>*/}\n//             {/*        <th> Salary per month </th>*/}\n//             {/*    </tr>*/}\n//             {/*    </thead>*/}\n//             {/*    <tbody>*/}\n//             {/*    {workers.map(worker => (*/}\n//             {/*        <tr key={worker.id}>*/}\n//             {/*            <td>{worker.name}</td>*/}\n//             {/*            <td>{worker.surname}</td>*/}\n//             {/*            <input onChange={countChangeHandler} value={worker.count} />*/}\n//             {/*            <td>{worker.salary}</td>*/}\n//             {/*            <td>{worker.salary * worker.count}</td>*/}\n//             {/*        </tr>*/}\n//             {/*    ))}*/}\n//             {/*    </tbody>*/}\n//             {/*</table>*/}\n//\n//\n// </>\n//         )\n//\n// }\n\n\n_s(App, \"a19zpSKz3nme9rytGYr1Gca6MLc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","App","notes","setNotes","initNotes","startEdit","index","copy","Object","assign","isEdit","endEdit","changeNote","event","text","target","value","result","map","note","elem"],"sources":["/Users/user/Documents/React.Hillel/react-practice/src/App.js"],"sourcesContent":["import './App.css';\nimport {useState} from \"react\";\n\n\n// function App(){\n//     const work = [\n//         {name: 'Samuel', surname: 'Jacson', count: 20, salary: 130, isEdit:false},\n//         {name: 'Jam', surname: 'Luise', count: 23, salary: 110, isEdit:false},\n//         {name: 'Katy', surname: 'Smitt', count: 20, salary: 100, isEdit:false},\n//         {name: 'Julia', surname: 'Krosbi', count: 22, salary: 140, isEdit:false},\n//         {name: 'Sam', surname: 'Venson', count: 22, salary: 160, isEdit:false}\n//     ]\n//\n//     const [workers, setWorkers] = useState(work)\n//\n//     function startEdit(index) {\n//         const copy = Object.assign([], workers);\n//         copy[index].isEdit = true;\n//         setWorkers(copy);\n//     }\n//\n//     function endEdit(index) {\n//         const copy = Object.assign([], workers);\n//         copy[index].isEdit = false;\n//         setWorkers(copy);\n//     }\n//\n//     function changeNote(index, event) {\n//         const copy = Object.assign([], workers);\n//         copy[index].text = event.target.value;\n//         setWorkers(copy);\n//     }\n//\n//     const result = workers.map((worker, index)=>{\n//         let elem;\n//         if (!worker.isEdit){\n//             elem = <span onClick={()=>startEdit(index)}>{worker.name} </span>\n//         } else {\n//             elem = <input\n//                 onChange={e=>changeNote(index, e)}\n//                 value={worker.name}\n//                 onBlur={() => endEdit(index)}\n//             />\n//         }\n//         return <li key={index}>{elem} </li>\n//     })\n//\n//     return(\n//         <ul>\n//             {result}\n//         </ul>\n//     )\n// }\n\n\n\nfunction App() {\n    const [notes, setNotes] = useState(initNotes);\n\n    function startEdit(index) {\n        const copy = Object.assign([], notes);\n        copy[index].isEdit = true;\n        setNotes(copy);\n    }\n\n    function endEdit(index) {\n        const copy = Object.assign([], notes);\n        copy[index].isEdit = false;\n        setNotes(copy);\n    }\n\n    function changeNote(index, event) {\n        const copy = Object.assign([], notes);\n        copy[index].text = event.target.value;\n        setNotes(copy);\n    }\n\n    const result = notes.map((note, index) => {\n        let elem;\n\n        if (!note.isEdit) {\n            elem = <span onClick={() => startEdit(index)}>\n\t\t\t\t{note.text}\n\t\t\t</span>;\n        } else {\n            elem = <input\n                value={note.text}\n                onChange={event => changeNote(index, event)}\n                onBlur={() => endEdit(index)}\n            />;\n        }\n\n        return <li key={index}>{elem}</li>;\n    });\n\n    return <ul>\n        {result}\n    </ul>;\n}\n\n\n\n\n\n\n// function App(){\n//     const [workers, setWorkers] = useState([\n//         {id:1, name: 'Samuel', surname: 'Jacson', count: 20, salary: 130},\n//         {id:2,name: 'Jam', surname: 'Luise', count: 23, salary: 110},\n//         {id:3,name: 'Katy', surname: 'Smitt', count: 20, salary: 100},\n//         {id:4,name: 'Julia', surname: 'Krosbi', count: 22, salary: 140},\n//         {id:5,name: 'Sam', surname: 'Venson', count: 22, salary: 160}\n//     ])\n//\n//     const createItem = (newItems) => {\n//         setWorkers([...workers, newItems])\n//     }\n//\n//     const changeItem = (newCount) => {\n//         setWorkers({...workers, count: newCount})\n//     }\n//\n//     return(\n//         <>\n//             <table>\n//                 <thead>\n//                 <tr>\n//                     <th> Name </th>\n//                     <th> Surname </th>\n//                     <th> Count days </th>\n//                     <th> Salary per day </th>\n//                     <th> Salary per month </th>\n//                 </tr>\n//                 </thead>\n//                 <tbody>\n//                 {workers.map(worker => (\n//                     <tr key={worker.id}>\n//                         <td>{worker.name}</td>\n//                         <td>{worker.surname}</td>\n//                         <CountChange\n//                         cnange={changeItem}\n//                         />\n//                         <td>{worker.salary}</td>\n//                         <td>{worker.salary * worker.count}</td>\n//                     </tr>\n//                 ))}\n//                 </tbody>\n//             </table>\n//\n//\n//             <AddTarget\n//             add={createItem}\n//             />\n//\n//\n//\n//             {/*<table>*/}\n//             {/*    <thead>*/}\n//             {/*    <tr>*/}\n//             {/*        <th> Name </th>*/}\n//             {/*        <th> Surname </th>*/}\n//             {/*        <th> Count days </th>*/}\n//             {/*        <th> Salary per day </th>*/}\n//             {/*        <th> Salary per month </th>*/}\n//             {/*    </tr>*/}\n//             {/*    </thead>*/}\n//             {/*    <tbody>*/}\n//             {/*    {workers.map(worker => (*/}\n//             {/*        <tr key={worker.id}>*/}\n//             {/*            <td>{worker.name}</td>*/}\n//             {/*            <td>{worker.surname}</td>*/}\n//             {/*            <input onChange={countChangeHandler} value={worker.count} />*/}\n//             {/*            <td>{worker.salary}</td>*/}\n//             {/*            <td>{worker.salary * worker.count}</td>*/}\n//             {/*        </tr>*/}\n//             {/*    ))}*/}\n//             {/*    </tbody>*/}\n//             {/*</table>*/}\n//\n//\n// </>\n//         )\n//\n// }\n\nexport default App;"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAAQA,QAAR,QAAuB,OAAvB,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA,SAASC,GAAT,GAAe;EAAA;;EACX,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAACI,SAAD,CAAlC;;EAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;IACtB,MAAMC,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,KAAlB,CAAb;IACAK,IAAI,CAACD,KAAD,CAAJ,CAAYI,MAAZ,GAAqB,IAArB;IACAP,QAAQ,CAACI,IAAD,CAAR;EACH;;EAED,SAASI,OAAT,CAAiBL,KAAjB,EAAwB;IACpB,MAAMC,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,KAAlB,CAAb;IACAK,IAAI,CAACD,KAAD,CAAJ,CAAYI,MAAZ,GAAqB,KAArB;IACAP,QAAQ,CAACI,IAAD,CAAR;EACH;;EAED,SAASK,UAAT,CAAoBN,KAApB,EAA2BO,KAA3B,EAAkC;IAC9B,MAAMN,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,KAAlB,CAAb;IACAK,IAAI,CAACD,KAAD,CAAJ,CAAYQ,IAAZ,GAAmBD,KAAK,CAACE,MAAN,CAAaC,KAAhC;IACAb,QAAQ,CAACI,IAAD,CAAR;EACH;;EAED,MAAMU,MAAM,GAAGf,KAAK,CAACgB,GAAN,CAAU,CAACC,IAAD,EAAOb,KAAP,KAAiB;IACtC,IAAIc,IAAJ;;IAEA,IAAI,CAACD,IAAI,CAACT,MAAV,EAAkB;MACdU,IAAI,gBAAG;QAAM,OAAO,EAAE,MAAMf,SAAS,CAACC,KAAD,CAA9B;QAAA,UACda,IAAI,CAACL;MADS;QAAA;QAAA;QAAA;MAAA,QAAP;IAGH,CAJD,MAIO;MACHM,IAAI,gBAAG;QACH,KAAK,EAAED,IAAI,CAACL,IADT;QAEH,QAAQ,EAAED,KAAK,IAAID,UAAU,CAACN,KAAD,EAAQO,KAAR,CAF1B;QAGH,MAAM,EAAE,MAAMF,OAAO,CAACL,KAAD;MAHlB;QAAA;QAAA;QAAA;MAAA,QAAP;IAKH;;IAED,oBAAO;MAAA,UAAiBc;IAAjB,GAASd,KAAT;MAAA;MAAA;MAAA;IAAA,QAAP;EACH,CAhBc,CAAf;EAkBA,oBAAO;IAAA,UACFW;EADE;IAAA;IAAA;IAAA;EAAA,QAAP;AAGH,C,CAOD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GA/HShB,G;;KAAAA,G;AAiIT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}